# 2023_summer_SW_0주차_IL
본격적으로 react.js를 하기 위해서는 기본적인 js에 대한 것들이 떠올라야 한다.
따라서 이전에 공부했었던 자료를 이용하여 js에 대한 간단한 내용들을 상기 시켜보았다.

1. js 기초
  * 식별자
  - 식별자 규칙
    A. 첫 번째 문자는 반드시 알파벳, _, $문자만 사용가능
    B. 두 번째 이상 문자 : 알파벳, _, 숫자, $ 사용가능
    C. 대소문자 구분한다. --> myHome과 MyHome은 다른 변수로 인식
    D. while, else와 같은 예약어는 사용 불가
  - 식별자를 정할 때 tips
    A. 식별자의 의미를 모두 담을 수 있도록 최대한 길게 작성
    B. 두단어 이상으로 구성되는 식별자는 가독성을 위해 단어의 시작을 알리는 알파벳을 대문자로

  * 문장 구분과 주석
  - 문장구분 규칙
    세미콜론으로 문장과 문장 구분
  한줄에 한 문장 작성시 세미콜론 생략 가능
  - 주석
    C언어와 마찬가지로 한줄 주석은 // 여러줄 주석은 
    /*
      ...
    */
  * 데이터 타입과 변수
  - 데이터 타입
    1. 숫자 타입 : 43, 3.141592 ; 정수, 실수 (parseInt, parseFloat)
    2. 논리 타입 : true, false
    3. 문자열 타입 : ''(홑따옴표).""(쌍따옴표) 모두 사용 가능
    4. 객체 레퍼런스 타입 : 객체를 가리킴(C언어의 포인터와 유사)
    5. null : 값이 없음을 표시
  - 변수 선언 방법
    var 변수명
  -js에도 지역변수, 전역변수가 존재
  - 연산 역시 C언어와 같음 단 비교할때 ==가 아니라 === 사용함 != 이친구도 !==로 작성함
2. 조건문과 반복문 & js 다이얼로그
 // 조건문과 반복문은 C언어와 동일하니 다이얼로그에 대해서만 정리하겠다.
 prompt("메시지","디폴트 값") // 디폴트 값은 문자열 취급 && 생략 가능
3. 함수
 함수 부분도 C언어와 유사
 다른 것들을 정리하자면
 - eval(exp)함수 : 수식이나 js 문장을 문자열 형태로 받아 실행하여 결과를 리턴함 --> 여러가지 위험성이 내포됨 // exp의 자바스크립트 식을 계산하고 결과 리턴
 - parseInt(str, radix)함수 : 문자열을 숫자로 변환하여 리턴해 주는 함수 // str 문자열을 radix 진수로 해석하고 10진 정수로 변환하여 리턴
 -isNaN(value)함수 : NAN(Not a Number)인지 확인하는 함수. 숫자가 아닐 때 True, 숫자일때 false를 리턴하는 함수
 -isFinite(value) : value가 숫자이면 true, 숫자가 아닐 때 false를 리턴하는 함수

4. 사용 가능한 객체 종류
 JS 코어 객체 : String, Math, Date, Array, Function // 브라우저 종류나 HTML, 페이지 구조에 관계없이 JS 프로그램에서 항상 활용할 수 있는 기본 객체들
5. document 객체
 * document 개요 : 브라우저는 HTML, 문서를 로드하기 전에 document 객체를 먼저 만든다.
  그리고 document 객체를 뿌리로 하여 DOM 트리를 만든다.
  document 객체는 이름 그대로 HTML 문서 전체를 대변하는 객체이며, 모든 DOM 객체를 접근하는 경로의 시작점이다.
  document 객체는 window의 자식으로 다음 두 가지 방법으로 접근한다. 
  A. 이벤트 리스너
   onmouseout, onmouseover, onchange, onclick, ...
  B. document 객체의 주요 프로퍼티, 컬렉션, 메소드
   - 프로퍼티 : title, body, head, location,domain,...
   - 컬렉션 : images, links, forms
   - 메소드 : getElementsByTagName() //주어진 태그 이름을 가진 모든 태그의 컬렉션 리턴
              getElementsByClassName() // 주어진 class 속성 값을 가진 모든 태그의 컬렉션 리턴 
              getElementsByName() // 주어진 name 속성 값을 가진 모든 태그의 컬렉션 리턴
              getElementsById() // 주어진 id 속성 값을 가진 첫 번째 DOM 객체 리턴
              addEventListener() // document 객체에 있는 이벤트 리스너 등록
              close() // document 객체에 있는 HTML,콘텐츠를 브라우저에 출력하고 더 이상 쓰기를 받지 않음
              createElement() // HTML 태그의 동적 생성
              open() // document에 담긴 콘텐츠를 모두 지우고, 새로운 HTML, 콘텐츠를 쓸 수 있도록 열기 
              removeEventListener() // document 객체에 등록된 이벤트 리스너 제거
              write() // document에 HTML, 콘텐츠 삽입, DOM 트리에 연결되고 브라우저에 출력됨
6. JS 코어 객체와 배열
 * JS 객체
  - 객체 관련 JS 언어의 특징 : JS는 C++,Java와 같은 객체 지향 언어라고 하기에는 부족함이 있다.
                              JS는 단순히 여러 객체들이 활용되는 객체 기반 언어정도 라고 할 수 있다.
                              객체에는 객체의 고유한 속성인 프로퍼티가 있는데 객체는 여러 프로퍼티와 값의 쌍으로 표현된다.
                              또, 한 객체는 여러 개의 함수를 가질  수 있는데 함수를 메소드라고 부른다.
  - new 키워드로 코어 객체 생성
  - 객체 접근 : 객체가 생성되면 객체 내부에는 프로퍼티와 메소드가 존재하게 된다. 객체 obj의 프로퍼티와 메소드를 접근하는 코드 모양은 다음과 같음
              obj.프로퍼티 = 값; // 객체 obj의 프로퍼티 값 변경
              변수 = obj.프로퍼티; // 객체 obj의 프로퍼티 값을 변수에 할당
              obj.메소드(매개변수 값들) // 객체 obj의 메소드 호출
 * 배열
  - JS 같은 경우 배열의 맨 끝에 한개씩만 추가가 가능해진다. 중간에 뛰어넘고 배열을 추가하면 오류가 발생!
  - JS에서는 배열은 Array 객체이다. JS의 배열은 여러 타입의 데이터가 섞여 저장될 수 있다.(함수까지 넣을 수 있다. 객체는 물론이고 정수 실수 섞여서도 가능)
  - 메소드
          concat(arr) : 현재 배열에 배열 arr의 원소들을 덧붙여 만든 새 배열 리턴. 현재 배열은 변하지 않음.
          join([separator]) : 배열의 모든 원소를 연결하여 하나의 문자열로 만들어 리턴. 각 원소 사이에 seperator로 지정된 문자열 삽입. separator가 생략되면 ","가 상용됨.
          reverse() : 원소를 역순으로 재배열하고, 이를 복사한 새로운 배열 리턴
          slice(idxA[,idxB]) : 두 인덱스 idxA와 idxB 사이의 원소들로 구성된 새 배열 리턴. 인덱스 idxB의 원소는 포함되지 않음. idxB가 생략되면 끝 원소까지 포함.
          sort() : 문자열 배열에만 적용. 문자열을 사전 순으로 정렬하고 이를 복사한 새배열 리턴
          toString() : 원소들을 모두 연결하여 하나의 문자열로 만들어 리턴. 원소와 원소 사이에 "," 삽입.
7. Data, String, Math
 * Data 객체
  - new Date() : 현재 시스템 날짜와 시간 값으로 초기화된 객체 생성
  - new Date(y,m,d) : y,m,d는 각각 년, 월(0~11), 일(1~31)을 나타내며, 이 시간 정보를 가진 객체 생성
  - new Date(y,m,d,hour,min,sec) : y,m,d,hour,min,sec는 각각 년, 월, 일, 시, 분, 초의 값이며, 이 시간 정보를 가진 객체 생성
  * Data 객체의 주요 메소드에서 주로 사용하는 건 toLocalString()정도
 *String 객체
  - 생성되면 내부의 문자열 수정이 거의 불가능하다.
  * String 객체의 주요 메소드에서 주로 사용하는 건 charCodeAt(idx) : 인덱스 idx에 있는 문자의 16비트 유니코드 값 리턴
 * Math 객체
  객체를 생성하는 것이 아닌 사용
  - E : Euler 상수
  - PI : 원주율 3.141592...
  - abs(x) : x의 절대값 리턴
  - sin(x) : 싸인 x값 리턴
  - exp(x) : e^x값 리턴
  - pow(x,y) : x^y 값 리턴
  - random() : 0<= random < 1 인 임의의 실수 리턴
  - floor(x) : x보다 작거나 같은 수 중 가장 큰 정수 리턴, Math.floor(3.9)는 3리턴
  - round(x) : x를 반올림한 정수 리턴. Math.round(3.7)은 4리턴. Math.round(3.2)는 3리턴
  - sqrt(x) : x의 제곱근 리턴
8. 사용자 객체
 -만드는 법
  A. new Object()로 빈 객체를 만들고 프로퍼티와 메소드 추가하기
  B. 리터럴 표기법으로 객체 만들기
  C. 프로토타입 형태로 객체 만들
